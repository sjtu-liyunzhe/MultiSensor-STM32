#include "adc.h"
#include "delay.h"
#include "pulser.h"
u8 FIFO_buffer[1000];	//存储STM32 的ADC采样数据，1000个采样点；可以使用volatile修饰词以保证每次的读取都是从绝对地址读出来的值，不会因为被会编译器进行优化导致读取到的值不是实时的AD值
DMA_HandleTypeDef DMA_Init_Handle;
ADC_HandleTypeDef ADC_Handle;
ADC_ChannelConfTypeDef ADC_Config;

static void Rheostat_ADC_GPIO_Config(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    // 使能 GPIO 时钟
    RHEOSTAT_ADC_GPIO_CLK_ENABLE();

    // 配置 IO
    GPIO_InitStructure.Pin = RHEOSTAT_ADC_GPIO_PIN;
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStructure.Pull = GPIO_NOPULL ; //不上拉不下拉
    HAL_GPIO_Init(RHEOSTAT_ADC_GPIO_PORT, &GPIO_InitStructure);
}

static void Rheostat_ADC_Mode_Config(void)
{
    //~先开DMA，再开ADC，当ADC采样一次完成之后，会产生一个DMA请求，所以这样是比较合理的

    // ------------------DMA Init 结构体参数 初始化--------------------------
    // ADC1使用DMA2，数据流0，通道0，这个是手册固定死的
    // 开启DMA时钟
    RHEOSTAT_ADC_DMA_CLK_ENABLE();
    // 数据传输通道
    DMA_Init_Handle.Instance = RHEOSTAT_ADC_DMA_STREAM;
    // 数据传输方向为外设到存储器
    DMA_Init_Handle.Init.Direction = DMA_PERIPH_TO_MEMORY;
    // 外设寄存器只有一个，地址不用递增
    DMA_Init_Handle.Init.PeriphInc = DMA_PINC_DISABLE;
    // 存储器地址固定
    DMA_Init_Handle.Init.MemInc = DMA_MINC_ENABLE;
    // // 外设数据大小为一个字节
    DMA_Init_Handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    //	存储器数据大小为一个字节，跟外设数据大小相同
    DMA_Init_Handle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    // ~循环传输模式,单次传输，一次传输指定的字节数（如1000），则在传输完1000个字节之后停止，等待下一次开启指令
    DMA_Init_Handle.Init.Mode = DMA_NORMAL;
    // DMA 传输通道优先级为高，当使用一个DMA通道时，优先级设置不影响
    DMA_Init_Handle.Init.Priority = DMA_PRIORITY_HIGH;
    // 禁止DMA FIFO	，使用直连模式
    DMA_Init_Handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    // FIFO 大小，FIFO模式禁止时，这个不用配置
//    DMA_Init_Handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
//    DMA_Init_Handle.Init.MemBurst = DMA_MBURST_SINGLE;
//    DMA_Init_Handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
    // 选择 DMA 通道，通道存在于流中
    DMA_Init_Handle.Init.Channel = RHEOSTAT_ADC_DMA_CHANNEL;
    //初始化DMA流，流相当于一个大的管道，管道里面有很多通道

    HAL_DMA_Init(&DMA_Init_Handle);

    HAL_DMA_Start (&DMA_Init_Handle,RHEOSTAT_ADC_DR_ADDR,(uint32_t)&FIFO_buffer,1000);

    // 开启ADC时钟
    RHEOSTAT_ADC_CLK_ENABLE();
    // -------------------ADC Init 结构体 参数 初始化------------------------
    // ADC1
    ADC_Handle.Instance = RHEOSTAT_ADC;
    // 时钟为fpclk 4分频，27MHz
    ADC_Handle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;
    // ADC 分辨率
    ADC_Handle.Init.Resolution = ADC_RESOLUTION_8B;
    // 禁止扫描模式，多通道采集才需要
    ADC_Handle.Init.ScanConvMode = DISABLE;
    // 连续转换
    ADC_Handle.Init.ContinuousConvMode = ENABLE;
    // 非连续转换
    ADC_Handle.Init.DiscontinuousConvMode = DISABLE;
    // 非连续转换个数
    ADC_Handle.Init.NbrOfDiscConversion   = 0;
    //禁止外部边沿触发
    ADC_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    //使用软件触发，外部触发不用配置，注释掉即可
    //ADC_Handle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
    //数据右对齐
    ADC_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    //转换通道 1个
    ADC_Handle.Init.NbrOfConversion = 1;
    //使能连续转换请求
    ADC_Handle.Init.DMAContinuousRequests = ENABLE;
    //转换完成标志
    ADC_Handle.Init.EOCSelection          = DISABLE;
    // 初始化ADC
    HAL_ADC_Init(&ADC_Handle);
    //---------------------------------------------------------------------------
    ADC_Config.Channel      = RHEOSTAT_ADC_CHANNEL;
    ADC_Config.Rank         = 1;
    // 采样时间间隔
    ADC_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
    ADC_Config.Offset       = 0;
    // 配置 ADC 通道转换顺序为1，第一个转换，采样时间为3个时钟周期
    HAL_ADC_ConfigChannel(&ADC_Handle, &ADC_Config);
}



void Rheostat_Init(void)
{
    Rheostat_ADC_GPIO_Config();
     Rheostat_ADC_Mode_Config();

}

void FIFO_read(u16 times,u8 Ch_Num)
{
    HAL_ADC_Start_DMA(&ADC_Handle, (uint32_t*)&FIFO_buffer, times);
    CH_RX(Ch_Num);			//Change to receive mode //~将pulser切换到接收状态，接收回波信号
    delay_us(500);			//~HAL_ADC_Start_DMA()函数只是开启带DMA的ADC，而没有开始采集，所以在关闭pulser的接收状态之前需要加一个延时函数，延时时间是“采样点数/采样频率”；
}

